*** a/middleware.ts
--- b/middleware.ts
@@
-import createIntl from 'next-intl/middleware';
-import type { NextRequest } from 'next/server';
-import { NextResponse } from 'next/server';
+import createIntl from 'next-intl/middleware';
+import type { NextRequest } from 'next/server';
+import { NextResponse } from 'next/server';
@@
 export default function middleware(req: NextRequest) {
   const res = intl(req);
   // Security headers baseline
   res.headers.set('X-Frame-Options', 'DENY');
   res.headers.set('X-Content-Type-Options', 'nosniff');
   res.headers.set('Referrer-Policy', 'strict-origin');
   res.headers.set('Permissions-Policy', 'camera=(), microphone=(), geolocation=()');
-  // Minimal CSP – ggf. Domains (Cal.com, Matomo) ergänzen
-  res.headers.set(
-    'Content-Security-Policy',
-    [
-      "default-src 'self'",
-      "script-src 'self' 'unsafe-inline' 'unsafe-eval'",
-      "style-src 'self' 'unsafe-inline'",
-      "img-src 'self' data:",
-      "font-src 'self' data:",
-      "connect-src 'self'",
-      "frame-ancestors 'none'",
-      "base-uri 'self'",
-    ].join('; ')
-  );
+  // CSP inkl. Cal.com für Buchung/Embed
+  const csp = [
+    "default-src 'self'",
+    "script-src 'self' 'unsafe-inline' 'unsafe-eval'",
+    "style-src 'self' 'unsafe-inline'",
+    "img-src 'self' data:",
+    "font-src 'self' data:",
+    // Cal.com Domains freigeben
+    "connect-src 'self' https://cal.com https://api.cal.com",
+    "frame-src https://cal.com https://embed.cal.com",
+    "frame-ancestors 'none'",
+    "base-uri 'self'",
+  ].join('; ');
+  res.headers.set('Content-Security-Policy', csp);
   return res;
 }
 
 export const config = {
   matcher: ['/((?!_next|api|.*\\..*).*)'],
 };
*** a/app/api/contact/route.ts
--- b/app/api/contact/route.ts
@@
-export const runtime = 'nodejs';
-import { z } from 'zod';
-import nodemailer from 'nodemailer';
-
-const Body = z.object({
-  name: z.string().trim().max(200).optional(),
-  email: z.string().email(),
-  message: z.string().trim().min(1).max(5000),
-  licht: z.boolean().optional()
-});
-
-export async function POST(req: Request) {
-  try {
-    const json = await req.json().catch(() => ({}));
-    const parsed = Body.safeParse(json);
-    if (!parsed.success) return new Response('E-Mail und Nachricht sind Pflicht.', { status: 400 });
-    const { name, email, message, licht } = parsed.data;
-
-    const { SMTP_HOST, SMTP_PORT, SMTP_USER, SMTP_PASS, SMTP_FROM, CONTACT_TO } = process.env as Record<string,string|undefined>;
-    if (!SMTP_HOST || !SMTP_PORT || !SMTP_FROM || !CONTACT_TO) {
-      console.warn('[contact] Missing SMTP envs – mail disabled');
-      return new Response('Empfangen (Mail derzeit deaktiviert).', { status: 200 });
-    }
-    const transporter = nodemailer.createTransport({
-      host: SMTP_HOST,
-      port: Number(SMTP_PORT),
-      secure: Number(SMTP_PORT) === 465,
-      auth: SMTP_USER && SMTP_PASS ? { user: SMTP_USER, pass: SMTP_PASS } : undefined
-    });
-    const subject = `Saimôr Kontakt${licht ? ' • Lichtgespräch' : ''}`;
-    const text = `Von: ${name ?? 'Unbekannt'} <${email}>\n\nNachricht:\n${message}\n`;
-    await transporter.sendMail({ from: SMTP_FROM, to: CONTACT_TO, replyTo: email, subject, text });
-    return new Response('OK', { status: 200 });
-  } catch (e) {
-    console.error('[contact]', e);
-    return new Response('Fehler beim Senden.', { status: 500 });
-  }
-}
+export const runtime = 'nodejs';
+import { z } from 'zod';
+
+// Cal-only Modus: API überprüft nur minimal und bestätigt.
+const Body = z.object({
+  name: z.string().trim().max(200).optional(),
+  email: z.string().email().optional(),
+  message: z.string().trim().max(5000).optional(),
+  licht: z.boolean().optional()
+});
+
+export async function POST(req: Request) {
+  const json = await req.json().catch(() => ({}));
+  const ok = Body.safeParse(json).success;
+  if (!ok) return new Response('Bad Request', { status: 400 });
+  // Kein Versand – Cal.com ist der primäre Funnel.
+  return new Response('OK', { status: 200 });
+}
*** a/components/ContactForm.tsx
--- b/components/ContactForm.tsx
@@
-"use client";
-import { useState } from "react";
-
-export default function ContactForm({ locale = "de" as "de" | "en" }) {
-  const t = (de: string, en: string) => (locale === "de" ? de : en);
-  const [loading, setLoading] = useState(false);
-  const [done, setDone] = useState<string | null>(null);
-  const [err, setErr] = useState<string | null>(null);
-
-  async function onSubmit(e: React.FormEvent<HTMLFormElement>) {
-    e.preventDefault();
-    setLoading(true); setDone(null); setErr(null);
-    const f = e.currentTarget;
-    const payload = {
-      name: (f.elements.namedItem("name") as HTMLInputElement)?.value || "",
-      email: (f.elements.namedItem("email") as HTMLInputElement)?.value || "",
-      message: (f.elements.namedItem("message") as HTMLTextAreaElement)?.value || "",
-      licht: (f.elements.namedItem("licht") as HTMLInputElement)?.checked || false,
-    };
-    try {
-      const r = await fetch("/api/contact", {
-        method:"POST", headers:{ "Content-Type":"application/json" }, body: JSON.stringify(payload)
-      });
-      if (!r.ok) throw new Error(await r.text());
-      setDone(t("Danke – wir antworten in Ruhe.", "Thank you – we’ll reply in due time."));
-      f.reset();
-    } catch (e:any) {
-      setErr(e?.message || t("Senden fehlgeschlagen.", "Sending failed."));
-    } finally {
-      setLoading(false);
-    }
-  }
-
-  return (
-    <form onSubmit={onSubmit} className="grid gap-3">
-      <input name="name" placeholder={t("Dein Name (optional)", "Your name (optional)")} className="bg-white/5 border border-white/10 rounded px-3 py-2" />
-      <input name="email" type="email" required placeholder="E-Mail" className="bg-white/5 border border-white/10 rounded px-3 py-2" />
-      <textarea name="message" required rows={5} placeholder={t("Deine Nachricht", "Your message")} className="bg-white/5 border border-white/10 rounded px-3 py-2" />
-      <label className="flex items-center gap-2 text-sm"><input type="checkbox" name="licht" /> {t("Ich möchte ein Lichtgespräch.", "I’d like a light talk.")}</label>
-      <button disabled={loading} className="px-4 py-2 rounded bg-[#FFCE45] text-[#0E1526] disabled:opacity-60">
-        {loading ? t("Senden …","Sending …") : t("Senden","Send")}
-      </button>
-      {done && <p className="text-sm text-emerald-300">{done}</p>}
-      {err && <p className="text-sm text-rose-300">{err}</p>}
-      <p className="text-xs text-white/60">{t("Hinweis: Keine Profile; nur E-Mail-Zustellung.", "Note: No profiling; e-mail delivery only.")}</p>
-    </form>
-  );
-}
+"use client";
+import Link from "next/link";
+
+export default function ContactForm({ locale = "de" as "de" | "en" }) {
+  const t = (de: string, en: string) => (locale === "de" ? de : en);
+  const cal = process.env.NEXT_PUBLIC_CAL_URL;
+  return (
+    <div className="grid gap-4">
+      <p className="text-sm text-white/80">
+        {t(
+          "In einem kostenlosen Erstgespräch finden wir heraus, wie Klarheit für euch aussehen kann.",
+          "In a free intro call we’ll explore how clarity can look for you."
+        )}
+      </p>
+      {cal ? (
+        <a
+          href={cal}
+          target="_blank"
+          rel="noreferrer"
+          className="inline-flex items-center justify-center px-5 py-2.5 rounded-full bg-[#FFCE45] text-[#0E1526] font-medium hover:opacity-90"
+        >
+          {t("Gespräch buchen", "Book a call")}
+        </a>
+      ) : (
+        <div className="text-sm text-rose-300">
+          {t("CAL_URL fehlt. Bitte NEXT_PUBLIC_CAL_URL setzen.", "CAL_URL missing. Please set NEXT_PUBLIC_CAL_URL.")}
+        </div>
+      )}
+      <p className="text-xs text-white/60">
+        {t("Hinweis: keine Profile; Buchung über Cal.com.", "Note: no profiling; booking via Cal.com.")}
+      </p>
+    </div>
+  );
+}
*** a/.env.example
--- b/.env.example
@@
-NODE_ENV=development
-NEXT_PUBLIC_SITE_URL=http://localhost:3000
-
-# SMTP Mail
-SMTP_HOST=
-SMTP_PORT=587
-SMTP_USER=
-SMTP_PASS=
-SMTP_FROM="Saimor <no-reply@saimor.world>"
-CONTACT_TO=contact@saimor.world
-
-# Cal.com
-NEXT_PUBLIC_CAL_URL=https://cal.com/saimor/30min
-
-# Matomo (anonymisiert)
-NEXT_PUBLIC_MATOMO_URL=https://analytics.example.tld/
-NEXT_PUBLIC_MATOMO_SITE_ID=1
+NODE_ENV=development
+NEXT_PUBLIC_SITE_URL=http://localhost:3000
+
+# Cal.com – primärer Buchungsflow
+NEXT_PUBLIC_CAL_URL=https://cal.com/USERNAME/lichtgespraech
+
+# Matomo (anonymisiert) – optional
+NEXT_PUBLIC_MATOMO_URL=
+NEXT_PUBLIC_MATOMO_SITE_ID=
