*** Begin Patch
*** Delete File: middleware.ts
*** End Patch
*** Begin Patch
*** Add File: middleware.ts
+import createIntl from 'next-intl/middleware';
+import type { NextRequest } from 'next/server';
+import { NextResponse } from 'next/server';
+
+// Combine locale middleware with security headers. Adjust domains in the CSP
+// if you use external services like Matomo or Cal.com.
+const intl = createIntl({
+  locales: ['de', 'en'],
+  defaultLocale: 'de',
+  localePrefix: 'always',
+});
+
+export default function middleware(req: NextRequest) {
+  const res = intl(req);
+  // Basic security headers
+  res.headers.set('X-Frame-Options', 'DENY');
+  res.headers.set('X-Content-Type-Options', 'nosniff');
+  res.headers.set('Referrer-Policy', 'strict-origin');
+  res.headers.set('Permissions-Policy', 'camera=(), microphone=(), geolocation=()');
+  // Content Security Policy – extend as needed for external domains
+  res.headers.set(
+    'Content-Security-Policy',
+    [
+      "default-src 'self'",
+      "script-src 'self' 'unsafe-inline' 'unsafe-eval'",
+      "style-src 'self' 'unsafe-inline'",
+      "img-src 'self' data:",
+      "font-src 'self' data:",
+      "connect-src 'self'",
+      "frame-ancestors 'none'",
+      "base-uri 'self'",
+    ].join('; '),
+  );
+  return res;
+}
+
+export const config = {
+  matcher: ['/((?!_next|api|.*\\..*).*)'],
+};
*** End Patch
*** Begin Patch
*** Update File: next.config.js
@@
-const nextConfig = {
-  experimental: { serverActions: { allowedOrigins: ["*"] } },
-};
+const nextConfig = {
+  // Harden server actions: remove wildcard and limit to your domains if needed
+  experimental: {
+    serverActions: {
+      // allowedOrigins: ['https://saimor.world', 'https://www.saimor.world'],
+    },
+  },
+};
*** End Patch
*** Begin Patch
*** Delete File: app/api/contact/route.ts
*** End Patch
*** Begin Patch
*** Add File: app/api/contact/route.ts
+// API route for contact form submissions
+import { NextResponse } from 'next/server';
+import { z } from 'zod';
+import nodemailer from 'nodemailer';
+
+// Define the expected body using zod
+const Body = z.object({
+  name: z.string().trim().max(200).optional(),
+  email: z.string().email(),
+  message: z.string().trim().min(1).max(5000),
+  licht: z.boolean().optional(),
+});
+
+export const runtime = 'nodejs';
+
+export async function POST(req: Request) {
+  try {
+    const json = await req.json().catch(() => ({}));
+    const parsed = Body.safeParse(json);
+    if (!parsed.success) {
+      return NextResponse.json({ ok: false, error: 'Ungültiges Formular.' }, { status: 400 });
+    }
+    const { name, email, message, licht } = parsed.data;
+    // Load environment variables for SMTP
+    const {
+      SMTP_HOST,
+      SMTP_PORT,
+      SMTP_USER,
+      SMTP_PASS,
+      SMTP_FROM,
+      CONTACT_TO,
+    } = process.env as Record<string, string | undefined>;
+    if (!SMTP_HOST || !SMTP_PORT || !SMTP_FROM || !CONTACT_TO) {
+      console.warn('[contact] Missing SMTP configuration – skipping mail.');
+      return NextResponse.json({ ok: true, note: 'Mail disabled' });
+    }
+    const transporter = nodemailer.createTransport({
+      host: SMTP_HOST,
+      port: Number(SMTP_PORT),
+      secure: Number(SMTP_PORT) === 465,
+      auth: SMTP_USER && SMTP_PASS ? { user: SMTP_USER, pass: SMTP_PASS } : undefined,
+    });
+    const subject = `Saimôr Kontakt${licht ? ' • Lichtgespräch' : ''}`;
+    const text = `Von: ${name ?? 'Unbekannt'} <${email}>\n\nNachricht:\n${message}`;
+    await transporter.sendMail({ from: SMTP_FROM, to: CONTACT_TO, replyTo: email, subject, text });
+    return NextResponse.json({ ok: true });
+  } catch (e) {
+    console.error('[contact]', e);
+    return NextResponse.json({ ok: false, error: 'Fehler beim Senden.' }, { status: 500 });
+  }
+}
*** End Patch
*** Begin Patch
*** Add File: components/ContactForm.tsx
+"use client";
+import { useState } from 'react';
+
+// Client-side contact form component with validation and API call
+export default function ContactForm({ locale = 'de' as 'de' | 'en' }) {
+  const t = (de: string, en: string) => (locale === 'de' ? de : en);
+  const [loading, setLoading] = useState(false);
+  const [done, setDone] = useState<string | null>(null);
+  const [err, setErr] = useState<string | null>(null);
+
+  async function onSubmit(e: React.FormEvent<HTMLFormElement>) {
+    e.preventDefault();
+    setLoading(true);
+    setDone(null);
+    setErr(null);
+    const f = e.currentTarget;
+    const payload = {
+      name: (f.elements.namedItem('name') as HTMLInputElement)?.value || '',
+      email: (f.elements.namedItem('email') as HTMLInputElement)?.value || '',
+      message: (f.elements.namedItem('message') as HTMLTextAreaElement)?.value || '',
+      licht: (f.elements.namedItem('licht') as HTMLInputElement)?.checked || false,
+    };
+    try {
+      const r = await fetch('/api/contact', {
+        method: 'POST',
+        headers: { 'Content-Type': 'application/json' },
+        body: JSON.stringify(payload),
+      });
+      if (!r.ok) {
+        const msg = await r.text();
+        throw new Error(msg);
+      }
+      setDone(t('Danke – wir antworten in Ruhe.', 'Thank you – we’ll reply in due time.'));
+      f.reset();
+    } catch (e: any) {
+      setErr(e?.message || t('Senden fehlgeschlagen.', 'Sending failed.'));
+    } finally {
+      setLoading(false);
+    }
+  }
+
+  return (
+    <form onSubmit={onSubmit} className="grid gap-3">
+      <input name="name" placeholder={t('Dein Name (optional)', 'Your name (optional)')} className="bg-white/5 border border-white/10 rounded px-3 py-2" />
+      <input name="email" type="email" required placeholder="E-Mail" className="bg-white/5 border border-white/10 rounded px-3 py-2" />
+      <textarea name="message" required rows={5} placeholder={t('Deine Nachricht', 'Your message')} className="bg-white/5 border border-white/10 rounded px-3 py-2" />
+      <label className="flex items-center gap-2 text-sm">
+        <input type="checkbox" name="licht" /> {t('Ich möchte ein Lichtgespräch.', 'I’d like a light talk.')}
+      </label>
+      <button disabled={loading} className="px-4 py-2 rounded bg-[#FFCE45] text-[#0E1526] disabled:opacity-60">
+        {loading ? t('Senden …', 'Sending …') : t('Senden', 'Send')}
+      </button>
+      {done && <p className="text-sm text-emerald-300">{done}</p>}
+      {err && <p className="text-sm text-rose-300">{err}</p>}
+      <p className="text-xs text-white/60">
+        {t('Hinweis: Keine Profile; nur E-Mail-Zustellung.', 'Note: No profiling; e-mail delivery only.')}
+      </p>
+    </form>
+  );
+}
*** End Patch
*** Begin Patch
*** Add File: app/og/route.ts
+import { ImageResponse } from 'next/og';
+
+export const runtime = 'edge';
+
+// Generate a simple OG image with brand colours and headline
+export async function GET() {
+  return new ImageResponse(
+    (
+      <div
+        style={{
+          width: '100%',
+          height: '100%',
+          display: 'flex',
+          alignItems: 'center',
+          justifyContent: 'center',
+          background: '#0E1526',
+          color: '#FFCE45',
+          fontSize: 64,
+          fontFamily: 'Inter, system-ui',
+        }}
+      >
+        Saimôr – Klarheit im Wandel
+      </div>
+    ),
+    { width: 1200, height: 630 },
+  );
+}
*** End Patch
*** Begin Patch
*** Add File: docs/SECURITY.md
+# Security Baseline
+
+This project takes privacy and security seriously. Follow these guidelines to protect your users:
+
+- **Headers**: All responses should include strong security headers. The middleware sets a Content-Security-Policy, X-Frame-Options (`DENY`), X-Content-Type-Options (`nosniff`), Referrer-Policy (`strict-origin`) and a restrictive Permissions-Policy. Extend the CSP when adding external services.
+- **HTTPS only**: Do not call `http://` URLs from the frontend or server; always use `https://`.
+- **API validation**: Validate all user input. The contact API uses a zod schema to enforce required fields and data types.
+- **Secrets**: Never commit secrets to the repository. Use environment variables (`.env` or deployment secrets) for SMTP credentials and other sensitive data.
+- **Matomo and analytics**: Configure Matomo with `disableCookies` and do not track user profiles. Only anonymised, aggregate data should be collected.
*** End Patch
*** Begin Patch
*** Add File: .env.example
+NODE_ENV=development
+NEXT_PUBLIC_SITE_URL=http://localhost:3000
+
+# SMTP mail settings
+SMTP_HOST=
+SMTP_PORT=587
+SMTP_USER=
+SMTP_PASS=
+SMTP_FROM="Saimor <no-reply@saimor.world>"
+CONTACT_TO=contact@saimor.world
+
+# Cal.com integration
+NEXT_PUBLIC_CAL_URL=https://cal.com/USERNAME/lichtgespraech
+
+# Matomo (analytics, anonymised)
+NEXT_PUBLIC_MATOMO_URL=https://analytics.example.tld/
+NEXT_PUBLIC_MATOMO_SITE_ID=1
*** End Patch
*** Begin Patch
*** Add File: infra/docker/Dockerfile
+FROM node:20-alpine AS deps
+WORKDIR /app
+COPY package.json pnpm-lock.yaml* ./
+RUN corepack enable && corepack prepare pnpm@latest --activate && pnpm i --frozen-lockfile
+
+FROM node:20-alpine AS build
+WORKDIR /app
+COPY --from=deps /app/node_modules ./node_modules
+COPY . .
+RUN corepack enable && corepack prepare pnpm@latest --activate && pnpm build
+
+FROM node:20-alpine AS runner
+WORKDIR /app
+ENV NODE_ENV=production
+COPY --from=build /app/.next ./.next
+COPY --from=build /app/public ./public
+COPY package.json ./
+EXPOSE 3000
+CMD ["node", "./.next/standalone/server.js"]
*** End Patch
*** Begin Patch
*** Add File: infra/docker/docker-compose.yml
+version: '3'
+services:
+  web:
+    build:
+      context: ../..
+      dockerfile: infra/docker/Dockerfile
+    environment:
+      - NODE_ENV=production
+      - PORT=3000
+    ports:
+      - '3000:3000'
+    restart: unless-stopped
*** End Patch
*** Begin Patch
*** Add File: .github/workflows/ci.yml
+name: CI
+
+on:
+  push:
+    branches: [main]
+  pull_request:
+
+jobs:
+  build-test:
+    runs-on: ubuntu-latest
+    steps:
+      - uses: actions/checkout@v4
+      - uses: pnpm/action-setup@v4
+        with:
+          version: 9
+      - uses: actions/setup-node@v4
+        with:
+          node-version: 20
+          cache: 'pnpm'
+      - run: pnpm i --frozen-lockfile
+      - run: pnpm -s tsc -p tsconfig.json --noEmit
+      - run: pnpm test -- --ci
+      - run: pnpm build
*** End Patch
*** Begin Patch
*** Add File: tests/unit/health.spec.ts
+import { describe, it, expect } from 'vitest';
+
+describe('health', () => {
+  it('always green', () => {
+    expect(true).toBe(true);
+  });
+});
*** End Patch
*** Begin Patch
*** Add File: tests/unit/contact.schema.spec.ts
+import { describe, it, expect } from 'vitest';
+import { z } from 'zod';
+
+const Body = z.object({
+  name: z.string().optional(),
+  email: z.string().email(),
+  message: z.string().min(1),
+  licht: z.boolean().optional(),
+});
+
+describe('contact schema', () => {
+  it('rejects invalid email', () => {
+    expect(Body.safeParse({ email: 'x', message: 'm' }).success).toBe(false);
+  });
+  it('accepts valid body', () => {
+    expect(Body.safeParse({ email: 'a@b.de', message: 'hi' }).success).toBe(true);
+  });
+});
*** End Patch
*** Begin Patch
*** Update File: package.json (partial)
@@
   "scripts": {
     "dev": "next dev",
     "build": "next build",
     "start": "next start",
     "lint": "next lint",
+    "test": "vitest run",
+    "test:watch": "vitest"
   },
@@
   "devDependencies": {
     "eslint": "^9.0.0",
+    "vitest": "^2.0.0",
+    "zod": "^3.23.8"
   }
*** End Patch
*** End Patch
